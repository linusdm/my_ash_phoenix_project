defmodule MyAshPhoenixApp.Blog.Post do
  # Using Ash.Resource here turns this model into an Ash resource.
  use Ash.Resource,
    # Tells Ash you want this resource to store its data in postgres.
    data_layer: AshPostgres.DataLayer

  # The postgres keyword is specific to the AshPostgres module.
  # It tells postgres what to call the table and to
  # communicate with postgres through MyPhoenixApp.Repo
  postgres do
    # Tells postgres what to call the table
    table "posts"
    # Tells Ash how to interface with the postgres table
    repo MyAshPhoenixApp.Repo
  end

  code_interface do
    define_for MyAshPhoenixApp.Blog
    define :create, action: :create
    define :read_all, action: :read
    define :update, action: :update
    define :destroy, action: :destroy
    define :get_by_id, args: [:id], action: :by_id
  end

  actions do
    # Exposes default built in actions to modify the resource
    defaults [:create, :read, :update, :destroy]

    read :by_id do
      argument :id, :uuid, allow_nil?: false
      get? true
      filter expr(id == ^arg(:id))
    end
  end

  # Attributes are the simple pieces of data that exist on your resource
  attributes do
    # Add an autogenerated UUID primary key called `:id`.
    uuid_primary_key :id
    # Add a string type attribute called `:title`
    attribute :title, :string do
      # We don't want the title to ever be `nil`
      allow_nil? false
    end

    # Add a string type attribute called `:content`
    # If not specified content can be `nil`
    attribute :content, :string
  end
end
